[
    {
        "id": "65d5e45697fed99a",
        "type": "subflow",
        "name": "finish node",
        "info": "A finish node marks the end of a node definition. The finish node will finalize writing all\nthe files needed to create your node; the package.json, html, javascript, and ecompassing\nproject folder within your node-red instance's node_module folder. It will also restart the\nnode-red instance if it was started using the command:\n\n``\nkill -9 `cat /tmp/node-red.pid`; nohup nice node-red > /dev/null 2>&1 & echo $! > /tmp/node-red.pid\n``\n\nThis makes ongoing development easy as you simply need to refresh the browser to see node changes\nafter you have invoked the flow.",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "37f124c38d4954c7"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0eb2dcf71e3bf43f",
        "type": "template",
        "z": "65d5e45697fed99a",
        "name": "nodemakerhtml",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<style>\n    {{{customcss}}}\n</style>\n<script type=\"text/html\" data-template-name=\"{{node_name}}\">\n    {{{inc_node_name}}}\n    <div id=\"node-props\" style=\"width: {{row_width}}px;\">\n        {{{edit_dialog}}}\n    </div><!--node-props-->\n</script>\n\n<script type=\"text/html\" data-help-name=\"{{node_name}}\">\n    {{{helpdetails}}}\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('{{node_name}}', {\n        category: '{{node_category}}',\n        {{#node_palettelabel.length}}\n        paletteLabel: '{{node_palettelabel}}',\n        {{/node_palettelabel.length}}        \n        color: '{{node_color}}',\n        defaults: {\n            name: {value:\"\"},\n            {{{defaults}}}\n        },\n        inputs: {{numinputs}},\n        outputs: {{numoutputs}},\n        icon: \"font-awesome/fa-{{{node_icon}}}\",\n        label: function() {\n            return this.name || \"{{node_name}}\";\n        },\n        labelStyle: function() {\n            return this.name ? \"node_label_italic\" : \"\";\n        },\n        oneditprepare: function() {\n            {{{oneditprepare}}}\n        },\n        oneditresize: function() {\n            {{{oneditresize}}}        \n        },\n        oneditsave: function() {\n            {{{oneditsave}}}\n        },\n        oneditcancel: function() {\n            {{{oneditcancel}}}\n        }\n    });\n    {{{othercode}}}\n</script>\n",
        "output": "str",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "46fdba84593e4a18"
            ]
        ]
    },
    {
        "id": "46fdba84593e4a18",
        "type": "file",
        "z": "65d5e45697fed99a",
        "name": "write nodename/nodename.html",
        "filename": "nodename_html",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 670,
        "y": 220,
        "wires": [
            [
                "f26a2d19e71211be"
            ]
        ]
    },
    {
        "id": "2a9f513d9174ccde",
        "type": "exec",
        "z": "65d5e45697fed99a",
        "command": "kill -9 `cat /tmp/node-red.pid`; nohup nice node-red > /dev/null 2>&1 & echo $! > /tmp/node-red.pid",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "restart node-red",
        "x": 200,
        "y": 480,
        "wires": [
            [
                "e674d758d3c14af8"
            ],
            [
                "e674d758d3c14af8"
            ],
            [
                "e674d758d3c14af8"
            ]
        ]
    },
    {
        "id": "e674d758d3c14af8",
        "type": "debug",
        "z": "65d5e45697fed99a",
        "name": "debug 50",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 480,
        "wires": []
    },
    {
        "id": "43b6b50718414f9f",
        "type": "template",
        "z": "65d5e45697fed99a",
        "name": "nodemakerjs",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "module.exports = function(RED) {\n    function {{node_name}}(config) {\n        RED.nodes.createNode(this,config);\n        var node = this;\n        {{{runtimecode}}}\n    }\n    RED.nodes.registerType('{{node_name}}', {{node_name}});\n}",
        "output": "str",
        "x": 350,
        "y": 320,
        "wires": [
            [
                "8f4279aa76193d2d"
            ]
        ]
    },
    {
        "id": "8f4279aa76193d2d",
        "type": "file",
        "z": "65d5e45697fed99a",
        "name": "write nodename/nodename.js",
        "filename": "nodename_js",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "2a9f513d9174ccde"
            ]
        ]
    },
    {
        "id": "fa07b8c430e2643d",
        "type": "switch",
        "z": "65d5e45697fed99a",
        "name": "",
        "property": "nodemakerhtml",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "0eb2dcf71e3bf43f"
            ],
            [
                "987b04d149c1e6b2"
            ]
        ]
    },
    {
        "id": "987b04d149c1e6b2",
        "type": "change",
        "z": "65d5e45697fed99a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nodemakerhtml",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 240,
        "wires": [
            [
                "46fdba84593e4a18"
            ]
        ]
    },
    {
        "id": "f26a2d19e71211be",
        "type": "switch",
        "z": "65d5e45697fed99a",
        "name": "",
        "property": "nodemakerjs",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "43b6b50718414f9f"
            ],
            [
                "0c85d78ee708d905"
            ]
        ]
    },
    {
        "id": "0c85d78ee708d905",
        "type": "change",
        "z": "65d5e45697fed99a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nodemakerjs",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "8f4279aa76193d2d"
            ]
        ]
    },
    {
        "id": "3d44470abb3be3af",
        "type": "function",
        "z": "65d5e45697fed99a",
        "name": "compose_code",
        "func": "if (msg.hasOwnProperty('useTemplates')) return msg;\nmsg._oneditprepare.push(msg.payload);\n\nString.prototype.delRightMost = function (sFind) {\n    for (var i = this.length; i >= 0; i = i - 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(0, f);\n            break;\n        }\n    }\n    return this;\n};\nString.prototype.getRightMost = function (sFind) {\n    for (var i = this.length; i >= 0; i = i - 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(f + sFind.length, f + sFind.length + this.length);\n        }\n    }\n    return this;\n};\nString.prototype.delLeftMost = function (sFind) {\n    for (var i = 0; i < this.length; i = i + 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(f + sFind.length, f + sFind.length + this.length);\n            break;\n        }\n    }\n    return this;\n};\nString.prototype.getLeftMost = function (sFind) {\n    for (var i = 0; i < this.length; i = i + 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(0, f);\n            break;\n        }\n    }\n    return this;\n};\nvar indent = \" \".repeat(4);\nvar tabIndent = \"\";\nvar edit_dialog = \" \".repeat(8) + '<div class=\"form-row\">' + \"\\n\";\nvar cTotal = 0;\nvar nItems = 0;\nvar initTab = false;\nvar firstTabName = '';\nvar bInRGroup = false;    \nmsg.edit_dialog.forEach(function(item, index) {\n    if (item.indexOf('\"type\":\"tab_definition\"') == -1 && item.indexOf('form-row rgroup') == -1) {\n        item = item.replace(/^/gm, tabIndent);\n        item = item.replace(/^/gm, tabIndent);\n        if (bInRGroup) {\n            item = item.replace(/^/gm, \" \".repeat(4));\n        }\n    }\n    if (item.indexOf('<div class=\"form-row rgroup\"') > -1) {\n        edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">').trimEnd() + \"\\n\";\n        item += \" \".repeat(4) + '<div class=\"form-row\">' + \"\\n\";\n        item = item.replace(/^/gm, \" \".repeat(8) + tabIndent).trimEnd() + \"\\n\";\n        bInRGroup = true;\n        edit_dialog += item;\n        return;\n    }\n    if (item.indexOf('<!--form-row rgroup-->') > -1) {\n        edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">').trimEnd() + \"\\n\";\n        edit_dialog += \" \".repeat(8) + tabIndent + \"</div><!--form-row rgroup-...-template-->\\n\";\n        if (index < msg.edit_dialog.length - 1) {\n            edit_dialog += indent + indent + tabIndent + '<div class=\"form-row\">' + \"\\n\";\n        }\n        bInRGroup = false;\n        return;\n    }\n    if (item.indexOf('\"type\":\"tab_definition\"') > -1) {\n        let tab = JSON.parse(item);\n        if (initTab == false) {\n            \n            // Inject the tab row\n            let r = edit_dialog.getRightMost('<div class=\"form-row\">');\n            edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">');\n            edit_dialog += '<div class=\"form-row func-tabs-row\">' + r;\n            edit_dialog += indent + indent + indent + '<ul style=\"min-width: 600px; margin-bottom: 20px;\" id=\"func-tabs\"></ul>' + \"\\n\";\n            edit_dialog += indent + indent + \"</div><!--func-tabs-row-->\\n\";\n            edit_dialog += indent + indent + '<div id=\"func-tabs-content\" style=\"min-height: calc(100% - 95px);\">' + \"\\n\";\n\n            // Start first tab\n            edit_dialog += indent + indent + indent + '<div id=\"func-tab-' + tab.name + '\" style=\"display:none\">' + \"\\n\";\n            edit_dialog += indent + indent + indent + indent + '<div class=\"form-row\">' + \"\\n\";\n            tabIndent = \" \".repeat(8);\n\n            // Init tab system\n            let code = \"// Prepare tab system\\n\";\n            code += \"var tabs = RED.tabs.create({\\n\";\n            code += \"    id: 'func-tabs',\\n\";\n            code += \"    onchange: function(tab) {\\n\";\n            code += \"        $('#func-tabs-content').children().hide();\\n\";\n            code += \"        $('#' + tab.id).show();\\n\";\n            code += \"    }\\n\";\n            code += \"});\\n\\n\";\n\n            // Add first tab code\n            code += \"// Add first tab, \" + tab.name + \"\\n\";\n            code += \"tabs.addTab({\\n\";\n            code += \"    id: 'func-tab-\" + tab.name + \"',\\n\";\n            code += \"    iconClass: 'fa fa-\" + tab.icon + \"',\\n\";\n            code += \"    label: '\" + tab.label + \"'\\n\";\n            code += \"});\\n\\n\";\n            firstTabName = tab.name;\n            code = code.replace(/^/gm, \" \".repeat(12));\n            msg._oneditprepare.push(code);\n            initTab = true;\n        }else{\n\n            // Add subsequent tabs \n            let r = edit_dialog.getRightMost('    <div class=\"form-row\"');\n            edit_dialog = edit_dialog.delRightMost('    <div class=\"form-row\"');\n            edit_dialog += \"</div><!--func-tab-tab#-->\\n\"; // close out last tab\n            edit_dialog += \" \".repeat(12) + '<div id=\"func-tab-' + tab.name + '\" style=\"display:none\">' + \"\\n\";\n            edit_dialog += \" \".repeat(16) + '<div class=\"form-row\"' + r;\n\n            // Add additional tab code\n            let code = \"// Add tab, \" + tab.name + \"\\n\";            \n            code += \"tabs.addTab({\\n\";\n            code += \"    id: 'func-tab-\" + tab.name + \"',\\n\";\n            code += \"    iconClass: 'fa fa-\" + tab.icon + \"',\\n\";\n            code += \"    label: '\" + tab.label + \"'\\n\";\n            code += \"});\\n\\n\";\n            code = code.replace(/^/gm, \" \".repeat(12));\n            msg._oneditprepare.push(code);\n        }        \n    }else{\n        if (tabIndent == '') {\n            item = item.replace(/^/gm, indent + indent + indent);\n        }else{\n            item = item.replace(/^/gm, indent);\n        }\n        let c = item.delLeftMost('col-').getLeftMost('\"').getLeftMost(' ');\n        cTotal += Number(c);\n        if (cTotal >= 83) {\n            let m = 5 * nItems;\n            if (m > 0) {\n                item = item.replace(\n                    'class=\"col ',\n                    'style=\"margin-right:-' + m.toString() + 'px;\" class=\"col '\n                );\n            }\n            if (nItems == 3) {\n                let r = edit_dialog.getRightMost('<div class=\"form-row\">');\n                edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">');\n                edit_dialog += '<div class=\"form-row\" style=\"margin-right:10px;\">' + r;\n            }\n            edit_dialog += item + \"\\n\";\n            if (index < msg.edit_dialog.length - 1) {\n                if (bInRGroup) {\n                    edit_dialog += \" \".repeat(4);\n                }\n                edit_dialog += indent + indent + tabIndent + \"</div><!--form-row-->\\n\";\n                edit_dialog += indent + indent + tabIndent + '<div class=\"form-row\">' + \"\\n\";\n                cTotal = 0;\n                nItems = 0;\n            }\n        } else {\n            edit_dialog += item + \"\\n\";\n            nItems++;\n        }\n    }\n});\nif (initTab) { \n    edit_dialog += \" \".repeat(16) + \"</div><!--form-row-->\\n\";\n    edit_dialog += \" \".repeat(12) + \"</div><!--func-tab-tab#-->\\n\";\n    edit_dialog += \" \".repeat(8) + \"</div><!--func-tabs-content-->\";\n\n    // Activate the first tab if present\n    let code = \" \".repeat(12) + 'tabs.activateTab(\"func-tab-' + firstTabName + '\");' + \"\\n\";\n    msg._oneditprepare.push(code);\n}else{\n    edit_dialog += \" \".repeat(8) + \"</div><!--form-row-->\";\n}\nmsg.edit_dialog = edit_dialog;\n\nlet defaults = '';\nmsg.defaults.forEach(function(item, index) {\n    defaults += \"            \" + item;\n    if (index < msg.defaults.length -1) {\n        defaults += \",\\n\";\n    }else{\n        defaults += \"\\n\";\n    }\n});\nmsg.defaults = defaults;\nmsg.oneditprepare = \"\\n\" + msg._oneditprepare.join(\"\\n\");\nmsg.oneditresize = \"\\n\" + msg._oneditresize.join(\"\\n\");\nmsg.oneditsave = \"\\n\" + msg._oneditsave.join(\"\\n\");\nmsg.oneditcancel = \"\\n\" + msg._oneditcancel.join(\"\\n\");\nmsg.defaults = msg.defaults.slice(0, -1);\nvar othercode = \"\";\nfor (var key in msg._othercode) {\n    var value = msg._othercode[key];\n    othercode += value;\n}\nmsg.othercode = \"\\n\" + othercode;\nmsg.runtimecode = \"\\n\" + msg.runtimecode.replace(/^/gm, \"    \".repeat(4));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 100,
        "wires": [
            [
                "fa07b8c430e2643d"
            ]
        ]
    },
    {
        "id": "37f124c38d4954c7",
        "type": "template",
        "z": "65d5e45697fed99a",
        "name": "re-size fix",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "            // Allow dynamic re-size after init. appearance \n            setTimeout(function () {\n                $('#node-props').css('width', '100%');\n            }, 30);",
        "output": "str",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "3d44470abb3be3af"
            ]
        ]
    },
    {
        "id": "da6577bfc4038dbb",
        "type": "subflow",
        "name": "checkbox",
        "info": "",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "b08129ad78aa131f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 160,
                "wires": [
                    {
                        "id": "d46ba26faedba5a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "field_columns",
                "type": "str",
                "value": "col-100",
                "ui": {
                    "label": {
                        "en-US": "Layout"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "full row"
                                },
                                "v": "col-100"
                            },
                            {
                                "l": {
                                    "en-US": "3/4 row"
                                },
                                "v": "col col-75"
                            },
                            {
                                "l": {
                                    "en-US": "2/3 row"
                                },
                                "v": "col col-66"
                            },
                            {
                                "l": {
                                    "en-US": "1/2 row"
                                },
                                "v": "col col-50"
                            },
                            {
                                "l": {
                                    "en-US": "1/3 row"
                                },
                                "v": "col col-33"
                            },
                            {
                                "l": {
                                    "en-US": "1/4 row"
                                },
                                "v": "col col-25"
                            }
                        ]
                    }
                }
            },
            {
                "name": "field_name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Field Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_label",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Label"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_default",
                "type": "str",
                "value": "checked",
                "ui": {
                    "label": {
                        "en-US": "Default"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "checked"
                                },
                                "v": "checked"
                            },
                            {
                                "l": {
                                    "en-US": "unchecked"
                                },
                                "v": "unchecked"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-check-square"
    },
    {
        "id": "b08129ad78aa131f",
        "type": "function",
        "z": "da6577bfc4038dbb",
        "name": "checkbox_props",
        "func": "msg.field_name = env.get('field_name');\nmsg.field_label = env.get('field_label');\nif (env.get('field_default') == 'checked') {\n    msg.checked = 'checked';\n    msg.field_default = true;\n}else{\n    msg.checked = '';\n    msg.field_default = false;\n}\nmsg.field_columns = env.get('field_columns');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "005ee05cba1991fe"
            ]
        ]
    },
    {
        "id": "005ee05cba1991fe",
        "type": "template",
        "z": "da6577bfc4038dbb",
        "name": "edit_dialog",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div class=\"{{field_columns}} reg-lbl\">\n    <label for=\"node-input-{{field_name}}\" style=\"width:18px;\">\n    <input type=\"checkbox\" id=\"node-input-{{field_name}}\" name=\"node-input-{{field_name}}\" style=\"margin-top:-3px;\" {{checked}}>{{{field_label}}}</label>\n</div><!--col-->",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "d46ba26faedba5a9"
            ]
        ]
    },
    {
        "id": "d46ba26faedba5a9",
        "type": "function",
        "z": "da6577bfc4038dbb",
        "name": "edit_dialog",
        "func": "msg.edit_dialog.push(msg.payload);\nif (msg.field_default == 'checked') {\n    msg.field_default = true;\n}else{\n    msg.field_default = false;\n}\nmsg.defaults.push(msg.field_name + ': {value:' + msg.field_default.toString() + '}');\nif (msg.hasOwnProperty('rgroup_name')) {\n    msg.rgroup_details.push({\n        field_name: msg.field_name,\n        field_default_type: '',\n        field_types: ''\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9771d13dd19bf60f",
        "type": "subflow",
        "name": "use templts.",
        "info": "If you use any of the code templates, be sure to place this node before it.",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "ebd81684ada1c31c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 100,
                "wires": [
                    {
                        "id": "6bb34952a24fe530",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#F3B567",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "ebd81684ada1c31c",
        "type": "template",
        "z": "9771d13dd19bf60f",
        "name": "re-size fix",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "            // Allow dynamic re-size after init. appearance \n            setTimeout(function () {\n                $('#node-props').css('width', '100%');\n            }, 30);",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "6bb34952a24fe530"
            ]
        ]
    },
    {
        "id": "6bb34952a24fe530",
        "type": "function",
        "z": "9771d13dd19bf60f",
        "name": "compose_code",
        "func": "msg._oneditprepare.push(msg.payload);\n\nString.prototype.delRightMost = function (sFind) {\n    for (var i = this.length; i >= 0; i = i - 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(0, f);\n            break;\n        }\n    }\n    return this;\n};\nString.prototype.getRightMost = function (sFind) {\n    for (var i = this.length; i >= 0; i = i - 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(f + sFind.length, f + sFind.length + this.length);\n        }\n    }\n    return this;\n};\nString.prototype.delLeftMost = function (sFind) {\n    for (var i = 0; i < this.length; i = i + 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(f + sFind.length, f + sFind.length + this.length);\n            break;\n        }\n    }\n    return this;\n};\nString.prototype.getLeftMost = function (sFind) {\n    for (var i = 0; i < this.length; i = i + 1) {\n        var f = this.indexOf(sFind, i);\n        if (f != -1) {\n            return this.substring(0, f);\n            break;\n        }\n    }\n    return this;\n};\nvar indent = \" \".repeat(4);\nvar tabIndent = \"\";\nvar edit_dialog = \" \".repeat(8) + '<div class=\"form-row\">' + \"\\n\";\nvar cTotal = 0;\nvar nItems = 0;\nvar initTab = false;\nvar firstTabName = '';\nvar bInRGroup = false;    \nmsg.edit_dialog.forEach(function(item, index) {\n    if (item.indexOf('\"type\":\"tab_definition\"') == -1 && item.indexOf('form-row rgroup') == -1) {\n        item = item.replace(/^/gm, tabIndent);\n        item = item.replace(/^/gm, tabIndent);\n        if (bInRGroup) {\n            item = item.replace(/^/gm, \" \".repeat(4));\n        }\n    }\n    if (item.indexOf('<div class=\"form-row rgroup\"') > -1) {\n        edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">').trimEnd() + \"\\n\";\n        item += \" \".repeat(4) + '<div class=\"form-row\">' + \"\\n\";\n        item = item.replace(/^/gm, \" \".repeat(8) + tabIndent).trimEnd() + \"\\n\";\n        bInRGroup = true;\n        edit_dialog += item;\n        return;\n    }\n    if (item.indexOf('<!--form-row rgroup-->') > -1) {\n        edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">').trimEnd() + \"\\n\";\n        edit_dialog += \" \".repeat(8) + tabIndent + \"</div><!--form-row rgroup-...-template-->\\n\";\n        if (index < msg.edit_dialog.length - 1) {\n            edit_dialog += indent + indent + tabIndent + '<div class=\"form-row\">' + \"\\n\";\n        }\n        bInRGroup = false;\n        return;\n    }\n    if (item.indexOf('\"type\":\"tab_definition\"') > -1) {\n        let tab = JSON.parse(item);\n        if (initTab == false) {\n            \n            // Inject the tab row\n            let r = edit_dialog.getRightMost('<div class=\"form-row\">');\n            edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">');\n            edit_dialog += '<div class=\"form-row func-tabs-row\">' + r;\n            edit_dialog += indent + indent + indent + '<ul style=\"min-width: 600px; margin-bottom: 20px;\" id=\"func-tabs\"></ul>' + \"\\n\";\n            edit_dialog += indent + indent + \"</div><!--func-tabs-row-->\\n\";\n            edit_dialog += indent + indent + '<div id=\"func-tabs-content\" style=\"min-height: calc(100% - 95px);\">' + \"\\n\";\n\n            // Start first tab\n            edit_dialog += indent + indent + indent + '<div id=\"func-tab-' + tab.name + '\" style=\"display:none\">' + \"\\n\";\n            edit_dialog += indent + indent + indent + indent + '<div class=\"form-row\">' + \"\\n\";\n            tabIndent = \" \".repeat(8);\n\n            // Init tab system\n            let code = \"// Prepare tab system\\n\";\n            code += \"var tabs = RED.tabs.create({\\n\";\n            code += \"    id: 'func-tabs',\\n\";\n            code += \"    onchange: function(tab) {\\n\";\n            code += \"        $('#func-tabs-content').children().hide();\\n\";\n            code += \"        $('#' + tab.id).show();\\n\";\n            code += \"    }\\n\";\n            code += \"});\\n\\n\";\n\n            // Add first tab code\n            code += \"// Add first tab, \" + tab.name + \"\\n\";\n            code += \"tabs.addTab({\\n\";\n            code += \"    id: 'func-tab-\" + tab.name + \"',\\n\";\n            code += \"    iconClass: 'fa fa-\" + tab.icon + \"',\\n\";\n            code += \"    label: '\" + tab.label + \"'\\n\";\n            code += \"});\\n\\n\";\n            firstTabName = tab.name;\n            code = code.replace(/^/gm, \" \".repeat(12));\n            msg._oneditprepare.push(code);\n            initTab = true;\n        }else{\n\n            // Add subsequent tabs \n            let r = edit_dialog.getRightMost('    <div class=\"form-row\"');\n            edit_dialog = edit_dialog.delRightMost('    <div class=\"form-row\"');\n            edit_dialog += \"</div><!--func-tab-tab#-->\\n\"; // close out last tab\n            edit_dialog += \" \".repeat(12) + '<div id=\"func-tab-' + tab.name + '\" style=\"display:none\">' + \"\\n\";\n            edit_dialog += \" \".repeat(16) + '<div class=\"form-row\"' + r;\n\n            // Add additional tab code\n            let code = \"// Add tab, \" + tab.name + \"\\n\";            \n            code += \"tabs.addTab({\\n\";\n            code += \"    id: 'func-tab-\" + tab.name + \"',\\n\";\n            code += \"    iconClass: 'fa fa-\" + tab.icon + \"',\\n\";\n            code += \"    label: '\" + tab.label + \"'\\n\";\n            code += \"});\\n\\n\";\n            code = code.replace(/^/gm, \" \".repeat(12));\n            msg._oneditprepare.push(code);\n        }        \n    }else{\n        if (tabIndent == '') {\n            item = item.replace(/^/gm, indent + indent + indent);\n        }else{\n            item = item.replace(/^/gm, indent);\n        }\n        let c = item.delLeftMost('col-').getLeftMost('\"').getLeftMost(' ');\n        cTotal += Number(c);\n        if (cTotal >= 83) {\n            let m = 5 * nItems;\n            if (m > 0) {\n                item = item.replace(\n                    'class=\"col ',\n                    'style=\"margin-right:-' + m.toString() + 'px;\" class=\"col '\n                );\n            }\n            if (nItems == 3) {\n                let r = edit_dialog.getRightMost('<div class=\"form-row\">');\n                edit_dialog = edit_dialog.delRightMost('<div class=\"form-row\">');\n                edit_dialog += '<div class=\"form-row\" style=\"margin-right:10px;\">' + r;\n            }\n            edit_dialog += item + \"\\n\";\n            if (index < msg.edit_dialog.length - 1) {\n                if (bInRGroup) {\n                    edit_dialog += \" \".repeat(4);\n                }\n                edit_dialog += indent + indent + tabIndent + \"</div><!--form-row-->\\n\";\n                edit_dialog += indent + indent + tabIndent + '<div class=\"form-row\">' + \"\\n\";\n                cTotal = 0;\n                nItems = 0;\n            }\n        } else {\n            edit_dialog += item + \"\\n\";\n            nItems++;\n        }\n    }\n});\nif (initTab) { \n    edit_dialog += \" \".repeat(16) + \"</div><!--form-row-->\\n\";\n    edit_dialog += \" \".repeat(12) + \"</div><!--func-tab-tab#-->\\n\";\n    edit_dialog += \" \".repeat(8) + \"</div><!--func-tabs-content-->\";\n\n    // Activate the first tab if present\n    let code = \" \".repeat(12) + 'tabs.activateTab(\"func-tab-' + firstTabName + '\");' + \"\\n\";\n    msg._oneditprepare.push(code);\n}else{\n    edit_dialog += \" \".repeat(8) + \"</div><!--form-row-->\";\n}\nmsg.edit_dialog = edit_dialog;\n\nlet defaults = '';\nmsg.defaults.forEach(function(item, index) {\n    defaults += \"            \" + item;\n    if (index < msg.defaults.length -1) {\n        defaults += \",\\n\";\n    }else{\n        defaults += \"\\n\";\n    }\n});\nmsg.defaults = defaults;\nmsg.oneditprepare = \"\\n\" + msg._oneditprepare.join(\"\\n\");\nmsg.oneditresize = \"\\n\" + msg._oneditresize.join(\"\\n\");\nmsg.oneditsave = \"\\n\" + msg._oneditsave.join(\"\\n\");\nmsg.oneditcancel = \"\\n\" + msg._oneditcancel.join(\"\\n\");\nmsg.defaults = msg.defaults.slice(0, -1);\nvar othercode = \"\";\nfor (var key in msg._othercode) {\n    var value = msg._othercode[key];\n    othercode += value;\n}\nmsg.othercode = \"\\n\" + othercode;\nmsg.runtimecode = \"\\n\" + msg.runtimecode.replace(/^/gm, \"    \".repeat(4));\nmsg.useTemplates = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c70964ba34544694",
        "type": "subflow",
        "name": "button",
        "info": "",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "5fd3369e032c68b0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "41f4b3c1077a06f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "field_columns",
                "type": "str",
                "value": "col-100",
                "ui": {
                    "label": {
                        "en-US": "Layout"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "full-row"
                                },
                                "v": "col-100"
                            },
                            {
                                "l": {
                                    "en-US": "3/4 row"
                                },
                                "v": "col col-75"
                            },
                            {
                                "l": {
                                    "en-US": "2/3 row"
                                },
                                "v": "col col-66"
                            },
                            {
                                "l": {
                                    "en-US": "1/2 row"
                                },
                                "v": "col col-50"
                            },
                            {
                                "l": {
                                    "en-US": "1/3 row"
                                },
                                "v": "col col-33"
                            },
                            {
                                "l": {
                                    "en-US": "1/4 row"
                                },
                                "v": "col col-25"
                            }
                        ]
                    }
                }
            },
            {
                "name": "field_name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Button Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_label",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Caption"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Icon"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "button_size",
                "type": "str",
                "value": "red-ui-button",
                "ui": {
                    "label": {
                        "en-US": "Size"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Regular"
                                },
                                "v": "red-ui-button btn-regular"
                            },
                            {
                                "l": {
                                    "en-US": "Small"
                                },
                                "v": "red-ui-button red-ui-button-small"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-square-o"
    },
    {
        "id": "5fd3369e032c68b0",
        "type": "function",
        "z": "c70964ba34544694",
        "name": "button_props",
        "func": "msg.field_name = env.get('field_name');\nmsg.field_label = env.get('field_label');\nlet icon = env.get('field_icon');\nif (icon != '') {\n    msg.field_icon = '<i class=\"fa fa-' + icon + '\"></i> ';\n} else {\n    msg.field_icon = '';\n}\nmsg.field_label_elm = msg.field_icon + msg.field_label;\nmsg.button_size = env.get('button_size');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 40,
        "wires": [
            [
                "09a5b20f490d7474"
            ]
        ]
    },
    {
        "id": "09a5b20f490d7474",
        "type": "template",
        "z": "c70964ba34544694",
        "name": "edit_dialog",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div class=\"{{field_columns}}\">\n    <button id=\"btn_{{field_name}}\" type=\"button\" class=\"{{{button_size}}}\">{{{field_label_elm}}}</button>\n</div>",
        "output": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "41f4b3c1077a06f2"
            ]
        ]
    },
    {
        "id": "41f4b3c1077a06f2",
        "type": "function",
        "z": "c70964ba34544694",
        "name": "edit_dialog",
        "func": "msg.edit_dialog.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d0a39641213352a7",
        "type": "subflow",
        "name": "label",
        "info": "The label node is used to place a standalone label in the property panel. Use this node to mark specific sections or to provide users with additional information. \n\nOther nodes may also include a built-in label and this node may not be necessary for nodes that have their own. The following properties for defining a label may apply to other nodes as well:\n\n* Layout - The number of columns the label will consume out of a division of four or three equal areas. To align controls on the panel on the same row, ensure the used column space totals to consume an entire row. \n* Label - The actual text that will be used when displaying the label.\n* Icon - A font awesome icon that will appear to the left of the label. You can specify the icon name sans any ‘fa’ prefix; i.e. bathtub \n\n",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "b15245fe8570aaf7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 160,
                "wires": [
                    {
                        "id": "84054fdfc2c499b0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "field_columns",
                "type": "str",
                "value": "col-100",
                "ui": {
                    "label": {
                        "en-US": "Layout"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "full-row"
                                },
                                "v": "col-100"
                            },
                            {
                                "l": {
                                    "en-US": "3/4 row"
                                },
                                "v": "col col-75"
                            },
                            {
                                "l": {
                                    "en-US": "2/3 row"
                                },
                                "v": "col col-66"
                            },
                            {
                                "l": {
                                    "en-US": "1/2 row"
                                },
                                "v": "col col-50"
                            },
                            {
                                "l": {
                                    "en-US": "1/3 row"
                                },
                                "v": "col col-33"
                            },
                            {
                                "l": {
                                    "en-US": "1/4 row"
                                },
                                "v": "col col-25"
                            }
                        ]
                    }
                }
            },
            {
                "name": "label_caption",
                "type": "str",
                "value": "&nbsp;",
                "ui": {
                    "label": {
                        "en-US": "Label"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "label_icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Icon"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-font"
    },
    {
        "id": "fe135416b9ef2efa",
        "type": "template",
        "z": "d0a39641213352a7",
        "name": "edit_dialog",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div class=\"{{field_columns}} reg-lbl\">\n    <label class=\"full-lbl\">\n        {{{label_icon}}}<span>{{{label_caption}}}</span>\n    </label>\n</div><!--col-->",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "84054fdfc2c499b0"
            ]
        ]
    },
    {
        "id": "b15245fe8570aaf7",
        "type": "function",
        "z": "d0a39641213352a7",
        "name": "label_props",
        "func": "msg.label_caption = env.get('label_caption');\nlet icon = env.get('label_icon');\nif (icon != '') {\n    msg.label_icon = '<i class=\"fa fa-' + icon + '\"></i> ';\n}else{\n    msg.label_icon = '';\n} \nmsg.field_columns = env.get('field_columns');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "fe135416b9ef2efa"
            ]
        ]
    },
    {
        "id": "84054fdfc2c499b0",
        "type": "function",
        "z": "d0a39641213352a7",
        "name": "edit_dialog",
        "func": "msg.edit_dialog.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7062e6f741533eb2",
        "type": "subflow",
        "name": "field ",
        "info": "The field node represents an instance of the Node-RED [Inputs field](https://nodered.org/docs/creating-nodes/edit-dialog#inputs). A plain input text box can be achieved with the no “Typed” checkbox or type definition specified. The following properties for defining a field are as follows:\n\n* Layout - The number of columns the label will consume out of a division of four or three equal areas. To align controls on the panel on the same row, ensure the used column space totals to consume an entire row.\n* Field Name - A JavaScript compatible variable name (no spaces hyphens or punctuation).\n* Label - The actual text that will be used when displaying the label.\n* Icon - A font awesome icon that will appear to the left of the label. You can specify the icon name sans any ‘fa’ prefix; i.e. bathtub\n* Default - the optional default contents of the field.\n* Placeholder - displays a grey value in the input field as a suggested or example value.\n* Required - whether the input field is required and must be filled out. True will invoke a basic validation check to ensure the value is supplied. A missing value will cause the node’s appearance to show an “needs configuration” triangle and subsequent message when the user attempts to deploy the flow. Additionally, a red border will appear around any required fields not filled out.\n* Typed - This section allows the field input to have one or more types to be prefixed to the field area and influences the fields display behavior. See the [Node-RED Inputs field for examples](https://nodered.org/docs/creating-nodes/edit-dialog#inputs).\n* Type Definitions - Allows for defining a custom type using JSON. When the above Typed checkbox “Include additional type definition array” is checked, this property becomes relevant. For example, you can create a custom input option such as “the complete msg object” as used in the [debug node](https://nodered.org/docs/user-guide/nodes#debug).\n* Default Type - This string value determines the default type to be selected for the input field when your node’s property panel is first opened. \n",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "73a3b0f6af6b0aeb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 260,
                "wires": [
                    {
                        "id": "67eed6e284e28123",
                        "port": 0
                    },
                    {
                        "id": "eda19645927d3dda",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "field_columns",
                "type": "str",
                "value": "col-100",
                "ui": {
                    "label": {
                        "en-US": "Layout"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "full-row"
                                },
                                "v": "col-100"
                            },
                            {
                                "l": {
                                    "en-US": "3/4 row"
                                },
                                "v": "col col-75 sml-lbl"
                            },
                            {
                                "l": {
                                    "en-US": "2/3 row"
                                },
                                "v": "col col-66 sml-lbl"
                            },
                            {
                                "l": {
                                    "en-US": "1/2 row"
                                },
                                "v": "col col-50 sml-lbl"
                            },
                            {
                                "l": {
                                    "en-US": "1/3 row"
                                },
                                "v": "col col-33 sml-lbl"
                            },
                            {
                                "l": {
                                    "en-US": "1/4 row"
                                },
                                "v": "col col-25 sml-lbl"
                            }
                        ]
                    }
                }
            },
            {
                "name": "field_name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Field Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_label",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Label"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Icon"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_default",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Default"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin"
                        ]
                    }
                }
            },
            {
                "name": "field_placeholder",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Placeholder"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "field_required",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Required"
                    }
                }
            },
            {
                "name": "typed",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Typed:"
                    },
                    "type": "none"
                }
            },
            {
                "name": "field_type_string",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "str"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_number",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "num"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_boolean",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "bool"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_msg",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "msg"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_flow",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "flow"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_global",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "global"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_json",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "json"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_type_additional",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Include additional type definition array (below)"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "field_additional_types",
                "type": "json",
                "value": "[{\"value\":\"full\",\"label\":\"complete msg object\",\"hasValue\":false}]",
                "ui": {
                    "label": {
                        "en-US": "Type Definitions"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "field_default_type",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Default Type"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-i-cursor"
    },
    {
        "id": "2f6d8f31aa468d9f",
        "type": "template",
        "z": "7062e6f741533eb2",
        "name": "edit_dialog",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div class=\"{{field_columns}}\">\n    {{{field_label_elm}}}\n    <input type=\"text\" id=\"node-input-{{field_name}}\" placeholder=\"{{{field_placeholder}}}\">\n    {{{field_has_hidden_type}}}\n</div><!--col-->",
        "output": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "a0b8b4c7a26b07dd"
            ]
        ]
    },
    {
        "id": "73a3b0f6af6b0aeb",
        "type": "function",
        "z": "7062e6f741533eb2",
        "name": "field_props",
        "func": "msg.field_name = env.get('field_name');\nmsg.field_label = env.get('field_label');\nlet icon = env.get('field_icon');\nif (icon != '') {\n    msg.field_icon = '<i class=\"fa fa-' + icon + '\"></i> ';\n}else{\n    msg.field_icon = '';\n}\nif (msg.field_label == '') {\n    msg.field_label_elm = '';\n}else{\n    msg.field_label_elm = '<label for=\"node-input-' + msg.field_name + '\">';\n    msg.field_label_elm += msg.field_icon + msg.field_label + '</label>';\n}\nmsg.field_placeholder = env.get('field_placeholder');\nmsg.field_required = env.get('field_required');\nmsg.field_default = env.get('field_default');\n\nmsg.field_type_string = env.get('field_type_string');\nmsg.field_type_number = env.get('field_type_number');\nmsg.field_type_boolean = env.get('field_type_boolean');\nmsg.field_type_msg = env.get('field_type_msg');\nmsg.field_type_flow = env.get('field_type_flow');\nmsg.field_type_global = env.get('field_type_global');\nmsg.field_type_json = env.get('field_type_json');\nmsg.field_type_additional = env.get('field_type_additional');\nmsg.field_default_type = env.get('field_default_type');\nmsg.field_types = [];\nif (msg.field_type_string) {\n    msg.field_types.push('str');\n}\nif (msg.field_type_number) {\n    msg.field_types.push('num');\n}\nif (msg.field_type_boolean) {\n    msg.field_types.push('bool');\n}\nif (msg.field_type_msg) {\n    msg.field_types.push('msg');\n}\nif (msg.field_type_flow) {\n    msg.field_types.push('flow');\n}\nif (msg.field_type_global) {\n    msg.field_types.push('global');\n}\nif (msg.field_type_json) {\n    msg.field_types.push('json');\n}\nif (msg.field_type_additional) {\n    msg.field_additional_types = env.get('field_additional_types');\n    msg.field_types = msg.field_types.concat(msg.field_additional_types);\n}\nmsg.field_has_hidden_type = '';\nif (msg.field_types.length > 0) {\n    if (msg.field_default_type == '') {\n        msg.field_default_type = msg.field_types[0];\n    }\n    msg.field_has_hidden_type = '<input type=\"hidden\" id=\"node-input-' + env.get('field_name') + 'Type\"';\n    msg.field_has_hidden_type += 'value=\"' + msg.field_default_type + '\">';\n    msg.field_types_s = JSON.stringify(msg.field_types);\n}\nlet fc = env.get('field_columns');\nif (msg.field_label == '') {\n    fc += ' no-label';\n}\nmsg.field_columns = fc;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 40,
        "wires": [
            [
                "2f6d8f31aa468d9f"
            ]
        ]
    },
    {
        "id": "a0b8b4c7a26b07dd",
        "type": "function",
        "z": "7062e6f741533eb2",
        "name": "edit_dialog",
        "func": "msg.edit_dialog.push(msg.payload);\nlet theDefault = msg.field_default;\nif (msg.field_default_type != 'bool' && msg.field_default_type != 'num') {\n    theDefault = '\"' + theDefault + '\"';\n}\nlet required = '';\nif (msg.field_required) {\n    required = ', required:true';\n}\nmsg.defaults.push(msg.field_name + ': {value:' + theDefault + required + '}');\nif (msg.field_types.length > 0) {\n    msg.defaults.push(msg.field_name + 'Type: {value:\"' + msg.field_default_type + '\"}');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "250dcfedab51f0e5"
            ]
        ]
    },
    {
        "id": "3c2eac4c542cd18e",
        "type": "template",
        "z": "7062e6f741533eb2",
        "name": "oneditprepare_template",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "            // Prepare field {{field_name}}\n            $(\"#node-input-{{field_name}}\").typedInput({\n                type: \"{{{field_default_type}}}\",\n                types: {{{field_types_s}}},\n                typeField: \"#node-input-{{field_name}}Type\"\n            });\n",
        "output": "str",
        "x": 490,
        "y": 40,
        "wires": [
            [
                "67eed6e284e28123"
            ]
        ]
    },
    {
        "id": "250dcfedab51f0e5",
        "type": "switch",
        "z": "7062e6f741533eb2",
        "name": "field_has_hidden_type",
        "property": "field_has_hidden_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 220,
        "wires": [
            [],
            [
                "eda19645927d3dda"
            ]
        ]
    },
    {
        "id": "67eed6e284e28123",
        "type": "function",
        "z": "7062e6f741533eb2",
        "name": "oneditprepare",
        "func": "if (!msg.hasOwnProperty('rgroup_name')) {\n    msg._oneditprepare.push(msg.payload);\n}else{\n    msg.rgroup_details.push({\n        field_name: msg.field_name,\n        field_default_type: msg.field_default_type,\n        field_types: msg.field_types,\n        field_default: msg.field_default\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "eda19645927d3dda",
        "type": "function",
        "z": "7062e6f741533eb2",
        "name": "field_group",
        "func": "if (msg.hasOwnProperty('rgroup_name')) {\n    msg.rgroup_details.push({\n        field_name: msg.field_name,\n        field_default_type: '',\n        field_types: '',\n        field_default: msg.field_default\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "85e13a6e48f6a1c3",
        "type": "subflow",
        "name": "start node",
        "info": "The start node marks the beginning of a new node defintion. To create a node,\nconnect an inject node to the start node and connect the start node to a \nfinish node. You may wire various other nodes between the start and finish\nnodes to define your node's user interface.\n\nThe following properties can be configured in the properties panel:\n\n* Node Name - choose a JavaScript variable safe name for your node.\n* Version - A valid version string in the form of major, minor, patch i.e. 1.0.0\n* Description - a short description of your node.\n* Category - The palette group the node will appear under; existing i.e. common or you can define your own.\n* Icon - An existing fontawesome name, sans the 'font-awesome/fa-' prefix; i.e. bathtub\n* Color - The color of the node as it appears in the palette and editor. I.e. #E2D96E\n* Keywords - Used in the package.json file for reference and indexing by npm.\n* Author Name - The name of the node author. Used in package.json\n* Author Email - The email of the node author. Used in package.json\n* GitHub Handle - The handle used for the GitHub repo URL, I.e. john will appears as https://github.com/john/node-name\n* Max Row Width - The initial width of the property dialog (in pixels) when it is first opened.\n* Inputs - Whether the node accepts an input or not; 1 or 0 our the only acceptable values.\n* Outputs - The number of outputs the node will have.\n* Include node name... - Determines if a default name field will appear at the top of the property window; appears above any tab or other input fields.\n",
        "category": "node maker",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "729874432b3551f1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 200,
                "wires": [
                    {
                        "id": "1d506b65823c19c3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "node_name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Node Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_version",
                "type": "str",
                "value": "0.0.1",
                "ui": {
                    "label": {
                        "en-US": "Version"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_description",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Description"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_category",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Category"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_palettelabel",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Palette Label"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Icon"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "node_color",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Color"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "keywords",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Keywords"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "author_name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Author Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "author_email",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Author Email"
                    }
                }
            },
            {
                "name": "github_handle",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "GitHub Handle"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "row_width",
                "type": "num",
                "value": "460",
                "ui": {
                    "label": {
                        "en-US": "Max Row Width"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "numinputs",
                "type": "num",
                "value": "1",
                "ui": {
                    "label": {
                        "en-US": "Inputs"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 1
                    }
                }
            },
            {
                "name": "numoutputs",
                "type": "num",
                "value": "1",
                "ui": {
                    "label": {
                        "en-US": "Outputs"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "inc_node_name",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Include node name field at the top"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "729874432b3551f1",
        "type": "function",
        "z": "85e13a6e48f6a1c3",
        "name": "start_node",
        "func": "msg.node_name = env.get('node_name');\nmsg.node_version = env.get('node_version');\nmsg.node_description = env.get('node_description');\nmsg.node_folder = env.get('PWD') + '/node_modules/node-red-' + msg.node_name + '/';\nlet k = env.get('keywords');\nk = '\"' + k.replaceAll(' ', '').replaceAll(',', '\",\"') + '\"';\nmsg.node_category = env.get('node_category');\nmsg.node_palettelabel = env.get('node_palettelabel');\nmsg.node_icon = env.get('node_icon');\nmsg.node_color = env.get('node_color');\nmsg.keywords = k;\nmsg.author_name = env.get('author_name');\nmsg.author_email = env.get('author_email');\nmsg.github_handle = env.get('github_handle');\nmsg.package_json = msg.node_folder + 'package.json';\nmsg.gitignore = msg.node_folder + '.gitignore';\nmsg.license = msg.node_folder + 'LICENSE';\nmsg.readme = msg.node_folder + 'README.md';\nmsg.nodename_js = msg.node_folder + msg.node_name + '/' + msg.node_name + '.js';\nmsg.nodename_html = msg.node_folder + msg.node_name + '/' + msg.node_name + '.html';\nmsg.edit_dialog = [];\nmsg._oneditprepare = [];\nmsg._oneditresize = [];\nmsg._oneditsave = [];\nmsg._oneditcancel = [];\nmsg._othercode = {};\nmsg.defaults = [];\nmsg.row_width = env.get('row_width');\nmsg.numinputs = env.get('numinputs');\nmsg.numoutputs = env.get('numoutputs');\nmsg.inc_node_name = env.get('inc_node_name');\nmsg.nodemakerhtml = '';\nmsg.nodemakerjs = '';\nmsg.runtimecode = '';\nif (msg.inc_node_name) {\n    msg.inc_node_name = '    <div class=\"form-row\">' +\"\\n\";\n    msg.inc_node_name += '        <label for=\"node-input-name\"><i class=\"icon-tag\"></i> Name</label>' + \"\\n\";\n    msg.inc_node_name += '        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">' + \"\\n\";\n    msg.inc_node_name += \"    </div>\";\n}else{\n    msg.inc_node_name = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 40,
        "wires": [
            [
                "1a9cbb92df9f9927",
                "4dc54964fd7d8d7b",
                "a79e8a6b35ceac10",
                "4eaf4f130e10c617",
                "1d506b65823c19c3"
            ]
        ]
    },
    {
        "id": "1a9cbb92df9f9927",
        "type": "template",
        "z": "85e13a6e48f6a1c3",
        "name": "package.json",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"node-red-{{node_name}}\",\n    \"version\": \"{{node_version}}\",\n    \"description\": \"A node that merges msg objects until all defined properties are present / conditions met before passing the combined msg along.\",\n    \"author\": \"{{author_name}} <{{author_email}}>\",\n    \"license\": \"MIT\",\n    \"keywords\": [{{{keywords}}}],\n    \"repository\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/{{github_handle}}/node-red-{{node_name}}.git\"\n    },\n    \"dependencies\": {\n    },\n    \"node-red\": {\n      \"nodes\": {\n        \"{{node_name}}\": \"{{node_name}}/{{node_name}}.js\"\n      }\n    }\n  }\n  ",
        "output": "str",
        "x": 380,
        "y": 40,
        "wires": [
            [
                "e164bb1b88912998"
            ]
        ]
    },
    {
        "id": "e164bb1b88912998",
        "type": "file",
        "z": "85e13a6e48f6a1c3",
        "name": "write package.json",
        "filename": "package_json",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 570,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4dc54964fd7d8d7b",
        "type": "template",
        "z": "85e13a6e48f6a1c3",
        "name": ".gitignore",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": ".DS_Store\nnode_modules\n",
        "output": "str",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "c2f33b913e572b75"
            ]
        ]
    },
    {
        "id": "c2f33b913e572b75",
        "type": "file",
        "z": "85e13a6e48f6a1c3",
        "name": "write .gitignore",
        "filename": "gitignore",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a79e8a6b35ceac10",
        "type": "template",
        "z": "85e13a6e48f6a1c3",
        "name": "MIT License",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "MIT License\n\nCopyright (c) 2022 {{author_name}}\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
        "output": "str",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "6846859d76b0ec5e"
            ]
        ]
    },
    {
        "id": "6846859d76b0ec5e",
        "type": "file",
        "z": "85e13a6e48f6a1c3",
        "name": "write LICENSE",
        "filename": "license",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 560,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4eaf4f130e10c617",
        "type": "template",
        "z": "85e13a6e48f6a1c3",
        "name": "README.md",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "# node-red-{{node_name}}\n{{{node_description}}}\n",
        "output": "str",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "7631ff7c6efd5ad8"
            ]
        ]
    },
    {
        "id": "7631ff7c6efd5ad8",
        "type": "file",
        "z": "85e13a6e48f6a1c3",
        "name": "write README.md",
        "filename": "readme",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 570,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1d506b65823c19c3",
        "type": "template",
        "z": "85e13a6e48f6a1c3",
        "name": "customcss",
        "field": "customcss",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ".red-ui-tray-content #dialog-form {\n    white-space:nowrap;\n}\n.full-row .red-ui-typedInput-container {\n    min-width: 70%;\n}\n.col input {\n    min-width: 100%;\n}\n.sml-lbl {\n    height: 66px;\n}\n.sml-lbl label {\n    font-size: smaller;\n    margin-bottom: 0px;\n    display: block!important;\n}\n.reg-lbl label {\n    white-space: nowrap;\n    margin-top: 5px;\n    height: 0px;\n}\n.red-ui-editor .form-row label.full-lbl {\n    white-space: normal;\n    width: 100%;\n}\n.col {\n    float: left;\n    margin-right: 5px;\n    min-height: 36px;\n}\n.col .red-ui-typedInput-container {\n    width: 100%!important;\n}\n.col-50 {\n    width: 50%;\n}\n.col-33 {\n    width: 33%;\n}\n.col-66 {\n    width: 66%;\n}\n.col-25 {\n    width: 25%;\n}\n.col-75 {\n    width: 75%;\n}\n.col-100 .red-ui-typedInput-container {\n    width: 70%!important;\n}\n.col-100.no-label .red-ui-typedInput-container {\n    width: 100%!important;\n}\n.txtarea {\n    padding-bottom: 26px;\n}\n.txtarea label {\n    vertical-align: top;\n    margin-top: 3px;\n}\n.txtarea  textarea {\n    width: 70%;\n    margin-bottom: -28px!important;\n}\n.btn-regular {\n    margin-bottom: 14px!important;\n}\n.red-ui-editableList-item-content {\n    display: inline-block;\n    margin-bottom: -6px;\n    width: -moz-available;\n    width: -webkit-fill-available;\n    width: fill-available;\n}\n.red-ui-editableList-item-content .sml-lbl {\n    height: auto;\n}\n",
        "output": "str",
        "x": 370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "142274a930a39bbd",
        "type": "tab",
        "label": "flow2src",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cb1013b93ba4d83e",
        "type": "junction",
        "z": "142274a930a39bbd",
        "x": 200,
        "y": 560,
        "wires": [
            [
                "269a8be2dc96e712"
            ]
        ]
    },
    {
        "id": "269a8be2dc96e712",
        "type": "junction",
        "z": "142274a930a39bbd",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "e5067a7a4c311090"
            ]
        ]
    },
    {
        "id": "6d15f18bdedc6bc8",
        "type": "subflow:85e13a6e48f6a1c3",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "node_name",
                "value": "flow2src",
                "type": "str"
            },
            {
                "name": "node_version",
                "value": "1.0.0",
                "type": "str"
            },
            {
                "name": "node_description",
                "value": "This node will write template and function node source code properties to a src sub-folder adjacent to the project's flows file; allowing for easy editing in external editors.",
                "type": "str"
            },
            {
                "name": "node_category",
                "value": "common",
                "type": "str"
            },
            {
                "name": "node_icon",
                "value": "folder-open",
                "type": "str"
            },
            {
                "name": "node_color",
                "value": "#B0DDB0",
                "type": "str"
            },
            {
                "name": "keywords",
                "value": "node-red, src, source, code, visual-studio-code, version-control, git, svn, diff",
                "type": "str"
            },
            {
                "name": "author_name",
                "value": "Stephen J. Carnam",
                "type": "str"
            },
            {
                "name": "author_email",
                "value": "steveorevo@gmail.com",
                "type": "str"
            },
            {
                "name": "github_handle",
                "value": "steveorevo",
                "type": "str"
            },
            {
                "name": "numinputs",
                "value": "0",
                "type": "num"
            },
            {
                "name": "numoutputs",
                "value": "0",
                "type": "num"
            },
            {
                "name": "inc_node_name",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "047efed160eb838a"
            ]
        ]
    },
    {
        "id": "00cdc75ccbb12be8",
        "type": "inject",
        "z": "142274a930a39bbd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "6d15f18bdedc6bc8"
            ]
        ]
    },
    {
        "id": "99e7dad03ef8fc7b",
        "type": "template",
        "z": "142274a930a39bbd",
        "name": "nodemakerjs",
        "field": "nodemakerjs",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "module.exports = function(RED) {\n    function {{node_name}}(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n        node.on('input', function (msg) {\n            if (!msg.hasOwnProperty('srcFolder')) return;\n            if (msg.srcFolder.trim() == '') msg.srcFolder = 'src';\n\n            // String manipulation functions\n            (function () {\n                String.prototype.delRightMost = function(sFind) {\n                    for (var i = this.length; i >= 0; i = i - 1) {\n                        var f = this.indexOf(sFind, i);\n                        if (f != -1) {\n                            return this.substring(0, f);\n                            break;\n                        }\n                    }\n                    return this;\n                };\n                String.prototype.getRightMost = function(sFind) {\n                    for (var i = this.length; i >= 0; i = i - 1) {\n                        var f = this.indexOf(sFind, i);\n                        if (f != -1) {\n                            return this.substring(f + sFind.length, f + sFind.length + this.length);\n                        }\n                    }\n                    return this;\n                };\n                String.prototype.delLeftMost = function(sFind) {\n                    for (var i = 0; i < this.length; i = i + 1) {\n                        var f = this.indexOf(sFind, i);\n                        if (f != -1) {\n                            return this.substring(f + sFind.length, f + sFind.length + this.length);\n                            break;\n                        }\n                    }\n                    return this;\n                };\n                String.prototype.getLeftMost = function(sFind) {\n                    for (var i = 0; i < this.length; i = i + 1) {\n                        var f = this.indexOf(sFind, i);\n                        if (f != -1) {\n                            return this.substring(0, f);\n                            break;\n                        }\n                    }\n                    return this;\n                };\n            })();\n\n            // Get the flowFile\n            const fs = require('fs');\n            let flowFile = RED.settings.userDir;\n            try{\n                if (RED.settings.get('editorTheme').projects.enabled) {\n                    let project = RED.settings.get('projects').activeProject;\n                    let package_json = flowFile + '/projects/' + project + '/package.json';\n\n                    // Read the package.json for the flowfile\n                    let pk = JSON.parse(fs.readFileSync(package_json).toString());\n                    flowFile += '/projects/' + project + '/' + pk['node-red']['settings']['flowFile'];\n                } else {\n                    flowFile += '/' + RED.settings.flowFile;\n                }\n            } catch(e) {\n                node.error(e);\n                return;\n            }\n\n            // Read and parse the flow file\n            let ff = JSON.parse(fs.readFileSync(flowFile).toString());\n            let path = flowFile.delRightMost('/') + '/' + msg.srcFolder;\n\n            // Write the relevant flow properties to the src folder\n            if (msg.action == 'flow2src') {\n                try {\n\n                    // Gather flows and subflows as an array\n                    let incFlows = [];\n                    if (config.incFlows.trim() != '*') {\n                        incFlows = config.incFlows.split(',').map(function (f) { return f.trim() });\n                    } else {\n                        incFlows = null;\n                    }\n                    let incSubflows = [];\n                    if (config.incSubflows.trim() != '*') {\n                        incSubflows = config.incSubflows.split(',').map(function (f) { return f.trim() });\n                    } else {\n                        incSubflows = null;\n                    }\n\n                    // Gather flow ids, folder safe names, and nodes for analysis in a single pass\n                    let theNodes = [];\n                    let theFolders = [];\n                    let theIDs = [];\n                    ff.forEach(function (obj) {\n\n                        // Check for matching flows\n                        if (obj.type == 'tab') {\n                            if (incFlows != null) {\n                                if (incFlows.indexOf(obj.label) == -1) {\n                                    return;\n                                }\n                            }\n                            theFolders.push(obj.label.replace(/[^a-z0-9]/gi, '_'));\n                            theIDs.push(obj.id);\n                        }\n\n                        // Check for matching subflows\n                        if (obj.type == 'subflow') {\n                            if (incSubflows != null) {\n                                if (incSubflows.indexOf(obj.name) == -1) {\n                                    return;\n                                }\n                            }\n                            theFolders.push(obj.name.replace(/[^a-z0-9]/gi, '_'));\n                            theIDs.push(obj.id);\n                        }\n                        // Gather nodes and templates\n                        if (obj.type == 'template' || obj.type == 'function' || obj.type == 'wp function') {\n                            theNodes.push(obj);\n                        }\n                    });\n\n                    // Narrow the nodes to just the flows and subflows we're interested in\n                    let existingFiles = [];\n                    let srcNodes = [];\n                    theNodes.forEach(function (obj) {\n                        if (theIDs.indexOf(obj.z) == -1) return;\n                        \n                        // Determine the filename extension\n                        let ext = '';\n                        if (obj.type == 'template') {\n                            ext = obj.format.toLowerCase();\n                            if (ext == 'handlebars' || ext == 'text') {\n                                ext = '';\n                            }\n                            if (ext == 'javascript') {\n                                ext = 'js';\n                            }\n                            if (ext != '') {\n                                ext = '.' + ext;\n                            }\n                        }\n                        if (obj.type == 'function') {\n                            ext = '.js';\n                        }\n                        if (obj.type == 'wp function') {\n                            ext = '.php';\n                        }\n                        let fname = obj.name.replace(/[^a-z0-9]/gi, '_');\n                        if (fname == '') {\n                            fname = 'untitled';\n                        }\n\n                        // Use existing extension in filename\n                        if (fname.indexOf('.') != -1) {\n                            ext = '.' + fname.getRightMost('.');\n                            fname = fname.delRightMost('.');\n                        }\n                        let file = path + '/' + theFolders[theIDs.indexOf(obj.z)] + '/' + fname + ext;\n                        let i = 2;\n\n                        // Iterate existing filenames\n                        while (existingFiles.indexOf(file) != -1) {\n                            file = path + '/' + theFolders[theIDs.indexOf(obj.z)] + '/' + fname + i.toString() + ext;\n                            i++;\n                        }\n                        obj.srcFiles = [];\n                        if (obj.type == 'template') {\n                            obj.srcFiles.push({\n                                id: obj.id,\n                                property: 'template',\n                                file: file\n                            });\n                            existingFiles.push(file);\n                        } else if (obj.type == 'function') {\n                            obj.srcFiles.push({\n                                id: obj.id,\n                                property: 'func',\n                                file: file\n                            });\n                            existingFiles.push(file);\n\n                            // Record function On Start and On Stop too\n                            let onStartFile = file;\n                            ext = onStartFile.getRightMost('.');\n                            onStartFile = onStartFile.delRightMost('.') + '_initialize' + ext;\n                            obj.srcFiles.push({\n                                id: obj.id,\n                                property: 'initialize',\n                                file: onStartFile\n                            });\n                            let onStopFile = file;\n                            ext = onStopFile.getRightMost('.');\n                            onStopFile = onStopFile.delRightMost('.') + '_finalize' + ext;\n                            obj.srcFiles.push({\n                                id: obj.id,\n                                property: 'finalize',\n                                file: onStopFile\n                            });\n                        } else if (obj.type == 'wp function') {\n                            obj.srcFiles.push({\n                                id: obj.id,\n                                property: 'func',\n                                file: file\n                            });\n                            existingFiles.push(file);\n                        }\n                        srcNodes.push(obj);\n                    });\n\n                    // Remove prior src folder\n                    fs.rmSync(path, { recursive: true, force: true });\n\n                    // Write the nodes to the src folder and record the manifest\n                    let manifest = [];\n                    srcNodes.forEach(function (obj) {\n                        obj.srcFiles.forEach(function (sF) {\n\n                            // Create the src path\n                            let sFPath = sF.file.delRightMost('/');\n                            if (!fs.existsSync(sFPath)) {\n                                fs.mkdirSync(sFPath, { recursive: true });\n                            }\n\n                            // Write the given file\n                            if (obj[sF.property] != '') {\n                                fs.writeFileSync(sF.file, obj[sF.property]);\n                                sF.file = sF.file.delLeftMost(path + '/');\n                                manifest.push(sF);\n                            }\n                        });\n                    });\n\n                    // Write the manifest to the src folder\n                    fs.writeFileSync(path + '/manifest.json', JSON.stringify(manifest, null, 4));\n                    node.status({ fill: \"green\", shape: \"dot\", text: \"updated files\" });\n                    setTimeout(function() {\n                        node.status({});\n                    }, 5000);\n                } catch(e) {\n                    node.error(e);\n                }\n            }\n\n            // Read src folder and update the flow\n            if (msg.action == 'src2flow') {\n                try {\n\n                    // Load the manifest\n                    if (!fs.existsSync(path + '/manifest.json')) return;\n                    let mn = JSON.parse(fs.readFileSync(path + '/manifest.json').toString());\n\n                    ff.forEach(function (obj) {\n                        mn.forEach(function(item) {\n                            if (item.id != obj.id) return;\n                            \n                            // Update the content from the external file\n                            let file = fs.readFileSync(path + '/' + item.file).toString();\n                            obj[item.property] = file;\n                        });\n                    });\n\n                    // Update the flow file\n                    fs.writeFileSync(flowFile, JSON.stringify(ff, null, 4));\n                } catch(e) {\n                    node.error(e);\n                }\n            }\n        });\n\n        // Automatic flow2src on deploys\n        if (config.chkAutoFlow2Src) {\n            node.receive({action:\"flow2src\", srcFolder: config.srcFolder});\n        }\n    }\n    RED.httpAdmin.post(\"/flow2src/:id\", RED.auth.needsPermission(\"inject.write\"), function (req, res) {\n        var node = RED.nodes.getNode(req.params.id);\n        if (node != null) {\n            try {\n                if (req.body) {\n                    node.receive(req.body);\n                } else {\n                    node.receive();\n                }\n                res.sendStatus(200);\n            } catch (err) {\n                res.sendStatus(500);\n                node.error(RED._(\"flow2src.failed\", { error: err.toString() }));\n            }\n        } else {\n            res.sendStatus(404);\n        }\n    });\n    RED.nodes.registerType('{{node_name}}', {{node_name}});\n}\n",
        "output": "str",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "8a8f094b96ed219d"
            ]
        ]
    },
    {
        "id": "2d8b09ba98491392",
        "type": "subflow:7062e6f741533eb2",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_name",
                "value": "incFlows",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Flows",
                "type": "str"
            },
            {
                "name": "field_default",
                "value": "*",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 460,
        "wires": [
            [
                "779ef02e60f7b7bb"
            ]
        ]
    },
    {
        "id": "5fc56e38b1aa13c4",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "label_caption",
                "value": "Comma delimited list of flows to include (use * for all):",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 420,
        "wires": [
            [
                "2d8b09ba98491392"
            ]
        ]
    },
    {
        "id": "779ef02e60f7b7bb",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "label_caption",
                "value": "Comma delimited list of subflows to include (use * for all):",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 520,
        "wires": [
            [
                "0d503039dc2aa5ec"
            ]
        ]
    },
    {
        "id": "0d503039dc2aa5ec",
        "type": "subflow:7062e6f741533eb2",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_name",
                "value": "incSubflows",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Subflows",
                "type": "str"
            },
            {
                "name": "field_default",
                "value": "*",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 560,
        "wires": [
            [
                "cb1013b93ba4d83e"
            ]
        ]
    },
    {
        "id": "c0ece61b2be947ed",
        "type": "subflow:c70964ba34544694",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-25",
                "type": "str"
            },
            {
                "name": "field_name",
                "value": "flow2src",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Flow-to-Src",
                "type": "str"
            },
            {
                "name": "field_icon",
                "value": "download",
                "type": "str"
            },
            {
                "name": "button_size",
                "value": "red-ui-button btn-regular",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 280,
        "wires": [
            [
                "01a499dc7ba0538a"
            ]
        ]
    },
    {
        "id": "01a499dc7ba0538a",
        "type": "subflow:c70964ba34544694",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-25",
                "type": "str"
            },
            {
                "name": "field_name",
                "value": "src2flow",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Src-to-Flow",
                "type": "str"
            },
            {
                "name": "field_icon",
                "value": "upload",
                "type": "str"
            },
            {
                "name": "button_size",
                "value": "red-ui-button btn-regular",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 320,
        "wires": [
            [
                "de169c9a0264b4b4"
            ]
        ]
    },
    {
        "id": "52340adacb325477",
        "type": "subflow:9771d13dd19bf60f",
        "z": "142274a930a39bbd",
        "name": "",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "84f6c1b1a2dab5cd"
            ]
        ]
    },
    {
        "id": "8452b129ecfc9b70",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-25",
                "type": "str"
            },
            {
                "name": "label_caption",
                "value": "Action",
                "type": "str"
            },
            {
                "name": "label_icon",
                "value": "bolt",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 240,
        "wires": [
            [
                "c0ece61b2be947ed"
            ]
        ]
    },
    {
        "id": "047efed160eb838a",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "label_caption",
                "value": "Flow-to-Src will write the flow source properties to the src folder. Use Src-to-Flow to integrate changes back into the flow (the web browser will refresh).",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 180,
        "wires": [
            [
                "8452b129ecfc9b70"
            ]
        ]
    },
    {
        "id": "de169c9a0264b4b4",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-25",
                "type": "str"
            },
            {
                "name": "label_caption",
                "value": "",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 360,
        "wires": [
            [
                "5fc56e38b1aa13c4"
            ]
        ]
    },
    {
        "id": "5d39ab11e3c5e610",
        "type": "subflow:da6577bfc4038dbb",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-75",
                "type": "str"
            },
            {
                "name": "field_name",
                "value": "chkAutoFlow2Src",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Automatically Flow-to-Src on Deploys",
                "type": "str"
            },
            {
                "name": "field_default",
                "value": "unchecked",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "52340adacb325477"
            ]
        ]
    },
    {
        "id": "4e27c11373f8de67",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_columns",
                "value": "col col-25",
                "type": "str"
            },
            {
                "name": "label_caption",
                "value": "",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "5d39ab11e3c5e610"
            ]
        ]
    },
    {
        "id": "84f6c1b1a2dab5cd",
        "type": "template",
        "z": "142274a930a39bbd",
        "name": "nodemakerhtml",
        "field": "nodemakerhtml",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<style>\n    {{{customcss}}}\n</style>\n<script type=\"text/html\" data-template-name=\"{{node_name}}\">\n    {{{inc_node_name}}}\n    <div id=\"node-props\" style=\"width: {{row_width}}px;\">\n        {{{edit_dialog}}}\n    </div><!--node-props-->\n</script>\n\n<script type=\"text/markdown\" data-help-name=\"{{node_name}}\">\n    {{{helpdetails}}}\n# node-red-flow2src\nNow you can easily see git diff, use CLI editors, or third-party IDEs like Visual Studio Code to leverage Co-Pilot with\nyour Node-RED based projects. This node will write template and function node source code properties to a src sub-folder\nadjacent to the project's flows file; and it will allow you to merge changes back into your flows when you're done\nediting.\n\n## How to Use flow2src\nSimply include the flow2src node on one of your project's flows. When enabling [Node-RED's project\nmode](https://nodered.org/docs/user-guide/projects/), the files can be easily managed within Node-RED itself. See the\nscreenshot below for reference:\n\n1) Include the flow2src node on one of your flows and open its property sheet.\n2) Click the \"Flow-to-Src\" button; flow2src will generate the files.\n3) Click Node-RED's \"Refresh changes\" button in the history tab.\n\n![screenshot of node-maker](https://raw.github.com/steveorevo/node-red-flow2src/main/images/flow2src.jpg)\n\nBy default, flow2src will look for all flows and subflows for template and function nodes and create a src folder.\nWithin the src folder are a number of subfolders of the same name as your flow tabs and subflows. Source code files with\nproperly named\nextensions (i.e. .js, .html, .json, .css, etc.) are written to the folders. The filename extensions are derived from the\nnode type (i.e. function node creates .js files) or the 'Syntax Highlight' mode setting for [template\nnodes](https://nodered.org/docs/user-guide/nodes#template). You can override the filename extension by explicitly naming\nyour node with an extension. Nodes that share the same name within a given flow will automatically be iterated, i.e.\nfunction_1.js, function_2.js, etc.\n\nAfter making edits to the files in your src folder; use the \"Src-to-Flow\" button to merge changes back into your flow\nfile.\n\n### Options\nYou can further customize which flows and subflows are exported and where they are exported using the following textbox\noptions:\n\n* Flows - specify a flow by name, or mulitple flows by seperating names by a comma. Use an asterick for all flows.\n* Subflows - specify a subflow by name, or mulitple subflows by seperating names by a comma. Use an asterick for all\nsubflows.\n* Output Folder - By default the folder is named 'src'; you can specify a different path relative to your project's flow\nfile.\n\nLastly, you can invoke the \"Flow-to-Src\" button automatically using the checkbox for \"Automatiaclly Flow-to-Src on\nDeploys\".\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('{{node_name}}', {\n        category: '{{node_category}}',\n        color: '{{node_color}}',\n        defaults: {\n            name: {value:\"\"},\n            {{{defaults}}}\n        },\n        inputs: {{numinputs}},\n        outputs: {{numoutputs}},\n        icon: \"font-awesome/fa-{{{node_icon}}}\",\n        label: function() {\n            return this.name || \"{{node_name}}\";\n        },\n        labelStyle: function() {\n            return this.name ? \"node_label_italic\" : \"\";\n        },\n        oneditprepare: function() {\n            {{{oneditprepare}}}\n            var node = this;\n            $('#btn_flow2src').click(function(){\n                doAjax({\"action\":'flow2src', \"srcFolder\": node.srcFolder}, node.id, function(res){\n                    $('#node-dialog-ok').click();\n                    let notice = RED.notify('Flow source properties written to \"./' + node.srcFolder + '\" folder.', {\n                        type: \"success\",\n                        timeout: 3000\n                    });\n                });\n            });\n            $('#btn_src2flow').click(function(){\n                doAjax({\"action\":'src2flow', \"srcFolder\": node.srcFolder}, node.id, function(res) {\n                    reloadFlows(function() {\n                        $('#node-dialog-ok').click();\n                    });\n                });\n            });\n        },\n        oneditresize: function() {\n            {{{oneditresize}}}        \n        },\n        oneditsave: function() {\n            {{{oneditsave}}}\n        },\n        oneditcancel: function() {\n            {{{oneditcancel}}}\n        }\n    });\n    {{{othercode}}}\n    function doAjax(d, id, cb) {\n        $.ajax({\n            url: \"flow2src/\" + id,\n            type: \"POST\",\n            data: JSON.stringify(d),\n            contentType: \"application/json; charset=utf-8\",\n            complete: cb,\n            error: function (jqXHR, textStatus, errorThrown) {\n                if (jqXHR.status == 404) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.not-deployed\") }), \"error\");\n                } else if (jqXHR.status == 500) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"flow2src.errors.failed\") }), \"error\");\n                } else if (jqXHR.status == 0) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.no-response\") }), \"error\");\n                } else {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.unexpected\", { status: jqXHR.status, message: textStatus }) }), \"error\");\n                }\n            }\n        });\n    }\n    function reloadFlows(cb) {\n        $.ajax({\n            url: \"flows\",\n            type: \"POST\",\n            data: JSON.stringify({}),\n            contentType: \"application/json; charset=utf-8\",\n            headers: {\n                'Node-RED-Deployment-Type': 'reload'\n            },\n            complete: cb,\n            error: function (jqXHR, textStatus, errorThrown) {\n                if (jqXHR.status == 404) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.not-deployed\") }), \"error\");\n                } else if (jqXHR.status == 500) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"flow2src.errors.failed\") }), \"error\");\n                } else if (jqXHR.status == 0) {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.no-response\") }), \"error\");\n                } else {\n                    RED.notify(node._(\"common.notification.error\", { message: node._(\"common.notification.errors.unexpected\", { status: jqXHR.status, message: textStatus }) }), \"error\");\n                }\n            }\n        });\n    }\n</script>\n",
        "output": "str",
        "x": 400,
        "y": 300,
        "wires": [
            [
                "99e7dad03ef8fc7b"
            ]
        ]
    },
    {
        "id": "d7590193b23b49c5",
        "type": "subflow:7062e6f741533eb2",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "field_name",
                "value": "srcFolder",
                "type": "str"
            },
            {
                "name": "field_label",
                "value": "Output Folder",
                "type": "str"
            },
            {
                "name": "field_default",
                "value": "src",
                "type": "str"
            },
            {
                "name": "field_placeholder",
                "value": "src",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "4e27c11373f8de67"
            ]
        ]
    },
    {
        "id": "e5067a7a4c311090",
        "type": "subflow:d0a39641213352a7",
        "z": "142274a930a39bbd",
        "name": "",
        "env": [
            {
                "name": "label_caption",
                "value": "The output folder relative to the flow file:",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "d7590193b23b49c5"
            ]
        ]
    },
    {
        "id": "8a8f094b96ed219d",
        "type": "subflow:65d5e45697fed99a",
        "z": "142274a930a39bbd",
        "name": "",
        "x": 390,
        "y": 400,
        "wires": []
    }
]